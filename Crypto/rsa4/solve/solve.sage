
from libnum import n2s

leak1 = 53853528327089061040303093834231744474613201923364140044371836646818281762929416729276829147155767421306393912415711749184361292673188570776817071579453926301986936322103658784931172781963708884439548588048934066065202777693442916201898454908845544455974060063822315635514402364509021161222182960063293115080
leak2 = 55921220289984223809823471985777567536977703110738995094935723387795630990673129168185109838615509364324320021324064534412684936080970387459382005424734558571839229464903319249773595408394303054124192896207097540714734410197528082940609745919885798422430410242469311998094417756185683312594294901611100283746
n = 62504650687709807722817312870428423895082115020561172340922358713647627531324897058252339784424537659490354123925071398748369652388195515685538906615665659695171655865170083912680694404757190251023205854546056260957364823711466953674803446006090950074836552978622828506480631535054582558055674477169351955333
e = 65537
c = 3880172583500746662419748693886947914077008016151139508423371419180227063435322078745309334297316682832991873861614329136090913429597295604201634318781212114734909206881901706340577800221529833998574688098425373656214722990736554919803419819724515320211734482328213684134484856242047491456734632467819165354

#sage code using groebner basis which gives the prime factors p & q
"""
R.<x,y,z> = Zmod(n)[]
I = ideal((x*2022+y*2021)^1919 - leak1, (x*2021+y*2022)^9191 - leak2, x*y - n)
print(I.groebner_basis())
[x^101 + 22654401677034862248210881607958313014868452532140648426626402094400161398915036523162651018620786943138223716232119150022795337186469540908638255280793828438786773803866526242052360042543522250171138267611481661825420951857802128551455905882600802550617131700117136046372873692688800963865577633221611502738, y^101 + 45839018619857807199076508477267190101934953331240996894309496262924153303196413234173329650644493535694795851052652601618157743795822028168408474738537815979759912822674513211756669611937518545505687020300281715004947146931335350449056850852658883697534836848422402700493833600101864075544442428374648883182, x*y, 8856939669053249032691376690195644257811163100726433222174650397668151511027562306314376372370489899600922129962269371952846868869970662589346369078311429*x, 7057138585476123098064169385601040509810508513444919316743409963291296699443995577046432918849967558661668265222278572391465231649287117335363133009275777*y]
"""

from Crypto.Util.number import *

p = 8856939669053249032691376690195644257811163100726433222174650397668151511027562306314376372370489899600922129962269371952846868869970662589346369078311429
q = 7057138585476123098064169385601040509810508513444919316743409963291296699443995577046432918849967558661668265222278572391465231649287117335363133009275777
assert p *q == n
phi = (p-1)*(q-1)
d = pow(e,-1,phi)
m = pow(c,d,n)
flag = n2s(m)
print(flag)
# REP{groebner_basis_can_solve_weird_polynomial_equations}
